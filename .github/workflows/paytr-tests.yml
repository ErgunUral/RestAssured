name: PayTR Test Automation - Simplified

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx2048m -Djava.awt.headless=true --add-opens jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED'

jobs:
  # Step 1: Basic Maven Setup and Compilation
  maven-setup:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw

      - name: Verify Maven Wrapper
        run: |
          echo "üîç Verifying Maven Wrapper..."
          ls -la mvnw
          ./mvnw --version

      - name: Environment Debug Information
        run: |
          echo "üîç Environment Information:"
          echo "Java Version: $(java -version 2>&1)"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Maven Opts: $MAVEN_OPTS"
          echo "Working Directory: $(pwd)"
          echo "Maven Wrapper Properties:"
          cat .mvn/wrapper/maven-wrapper.properties

      - name: Clean and Validate Project
        run: |
          echo "üßπ Cleaning project..."
          ./mvnw clean -q

      - name: Compile Main Sources
        run: |
          echo "üî® Compiling main sources..."
          ./mvnw compile -q

      - name: Compile Test Sources
        run: |
          echo "üî® Compiling test sources..."
          ./mvnw test-compile -q

      - name: Verify Dependencies
        run: |
          echo "üì¶ Verifying dependencies..."
          ./mvnw dependency:resolve -q

  # Step 2: Simple Test Execution
  simple-tests:
    runs-on: ubuntu-latest
    needs: maven-setup
    timeout-minutes: 20
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw

      - name: Setup Chrome Browser
        uses: browser-actions/setup-chrome@latest

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Setup Virtual Display
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

      - name: Create Required Directories
        run: |
          mkdir -p screenshots
          mkdir -p logs
          mkdir -p target/allure-results

      - name: Run Basic Maven Test (No TestNG XML)
        env:
          DISPLAY: :99
        run: |
          echo "üß™ Running basic Maven test without TestNG XML..."
          ./mvnw test \
            -Dtest=PayTRAPITests \
            -Dmaven.test.failure.ignore=true \
            -Dheadless=true \
            -Dbrowser=chrome \
            -Denvironment=staging \
            -q

      - name: Upload Basic Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: basic-test-results
          path: |
            target/surefire-reports/
            target/allure-results/
            screenshots/
            logs/

  # Step 3: TestNG XML Configuration Test
  testng-tests:
    runs-on: ubuntu-latest
    needs: simple-tests
    timeout-minutes: 25
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw

      - name: Setup Chrome Browser
        uses: browser-actions/setup-chrome@latest

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Setup Virtual Display
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

      - name: Create Required Directories
        run: |
          mkdir -p screenshots
          mkdir -p logs
          mkdir -p target/allure-results

      - name: Verify TestNG Configuration Files
        run: |
          echo "üìã Available TestNG configuration files:"
          ls -la src/test/resources/testng*.xml || echo "No TestNG XML files found"

      - name: Run API Tests with TestNG XML
        env:
          DISPLAY: :99
        run: |
          echo "üß™ Running API tests with TestNG XML..."
          ./mvnw test \
            -DsuiteXmlFile=src/test/resources/testng-api.xml \
            -Dmaven.test.failure.ignore=true \
            -Dheadless=true \
            -Dbrowser=chrome \
            -Denvironment=staging \
            -Dparallel=none \
            -DthreadCount=1 \
            -q

      - name: Upload TestNG Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: testng-test-results
          path: |
            target/surefire-reports/
            target/allure-results/
            screenshots/
            logs/

  # Step 4: Comprehensive Test Suite (Only if previous steps succeed)
  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: [maven-setup, simple-tests, testng-tests]
    if: success()
    timeout-minutes: 30
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw

      - name: Setup Chrome Browser
        uses: browser-actions/setup-chrome@latest

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Setup Virtual Display
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

      - name: Install Allure
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Create Required Directories
        run: |
          mkdir -p screenshots
          mkdir -p logs
          mkdir -p target/allure-results

      - name: Run Comprehensive Test Suite
        env:
          DISPLAY: :99
          CHROME_BIN: /usr/bin/google-chrome
          CHROMEDRIVER_PATH: /usr/local/bin/chromedriver
        run: |
          echo "üöÄ Running comprehensive test suite..."
          ./mvnw test \
            -DsuiteXmlFile=src/test/resources/testng-comprehensive-ci.xml \
            -Dmaven.test.failure.ignore=true \
            -Dheadless=true \
            -Dbrowser=chrome \
            -Denvironment=staging \
            -Dparallel=none \
            -DthreadCount=1 \
            -Dallure.results.directory=target/allure-results \
            -Dwebdriver.chrome.driver=/usr/local/bin/chromedriver \
            -q

      - name: Generate Allure Report
        if: always()
        run: |
          echo "üìä Generating Allure Report..."
          allure generate target/allure-results --clean --output target/allure-report

      - name: Upload Comprehensive Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            target/surefire-reports/
            target/allure-results/
            target/allure-report/
            screenshots/
            logs/

  # Final Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [maven-setup, simple-tests, testng-tests, comprehensive-tests]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "üìä PayTR Test Automation Summary"
          echo "================================"
          echo "Maven Setup: ${{ needs.maven-setup.result }}"
          echo "Simple Tests: ${{ needs.simple-tests.result }}"
          echo "TestNG Tests: ${{ needs.testng-tests.result }}"
          echo "Comprehensive Tests: ${{ needs.comprehensive-tests.result }}"
          echo ""
          if [[ "${{ needs.maven-setup.result }}" == "success" ]]; then
            echo "‚úÖ Maven setup and compilation successful"
          else
            echo "‚ùå Maven setup failed - check basic configuration"
          fi
          
          if [[ "${{ needs.simple-tests.result }}" == "success" ]]; then
            echo "‚úÖ Basic test execution successful"
          else
            echo "‚ùå Basic test execution failed"
          fi
          
          if [[ "${{ needs.testng-tests.result }}" == "success" ]]; then
            echo "‚úÖ TestNG XML configuration working"
          else
            echo "‚ùå TestNG XML configuration issues"
          fi
          
          if [[ "${{ needs.comprehensive-tests.result }}" == "success" ]]; then
            echo "‚úÖ Comprehensive test suite successful"
          else
            echo "‚ö†Ô∏è Comprehensive test suite had issues (expected for API tests)"
          fi