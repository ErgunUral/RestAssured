name: PayTR Test Automation CI/CD

on:
  # Push ve Pull Request'lerde √ßalƒ±≈ütƒ±r
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  
  # Zamanlanmƒ±≈ü √ßalƒ±≈ütƒ±rma (her g√ºn saat 02:00, 08:00, 14:00, 20:00)
  schedule:
    - cron: '0 2,8,14,20 * * *'
  
  # Manuel √ßalƒ±≈ütƒ±rma
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test Suite to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - security
          - performance
          - api
          - smoke
      browser:
        description: 'Browser to use'
        required: true
        default: 'chrome'
        type: choice
        options:
          - chrome
          - firefox
          - edge
      environment:
        description: 'Test Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development

env:
  JAVA_VERSION: '11'
  MAVEN_VERSION: '3.8.6'
  ALLURE_VERSION: '2.20.1'

jobs:
  # Test Environment Setup
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-suite: ${{ steps.setup-vars.outputs.test-suite }}
      browser: ${{ steps.setup-vars.outputs.browser }}
      environment: ${{ steps.setup-vars.outputs.environment }}
    steps:
      - name: Setup Variables
        id: setup-vars
        run: |
          # Manuel √ßalƒ±≈ütƒ±rma i√ßin input'larƒ± kullan, yoksa default deƒüerleri
          TEST_SUITE="${{ github.event.inputs.test_suite || 'comprehensive' }}"
          BROWSER="${{ github.event.inputs.browser || 'chrome' }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          echo "test-suite=$TEST_SUITE" >> $GITHUB_OUTPUT
          echo "browser=$BROWSER" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "üöÄ PayTR Test Automation ba≈ülatƒ±lƒ±yor..."
          echo "üìã Test Suite: $TEST_SUITE"
          echo "üåê Browser: $BROWSER"
          echo "üèóÔ∏è Environment: $ENVIRONMENT"

  # Smoke Tests - Hƒ±zlƒ± kontrol
  smoke-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[smoke]')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup Chrome Browser
        uses: browser-actions/setup-chrome@latest

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Smoke Tests
        run: |
          mvn clean test \
            -Dsurefire.suiteXmlFiles=src/test/resources/testng-smoke.xml \
            -Dbrowser=chrome \
            -Denvironment=staging \
            -Dheadless=true

      - name: Upload Smoke Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            target/surefire-reports/
            target/allure-results/
            screenshots/

  # Comprehensive Tests - Tam test s√ºiti
  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        browser: [chrome, firefox]
        test-suite: [security, performance, api, integration]
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup Chrome Browser
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@latest

      - name: Setup Firefox Browser
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@latest

      - name: Setup ChromeDriver
        if: matrix.browser == 'chrome'
        uses: nanasess/setup-chromedriver@v2

      - name: Setup GeckoDriver
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-geckodriver@latest

      - name: Install Allure
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -zxf allure-${{ env.ALLURE_VERSION }}.tgz
          sudo mv allure-${{ env.ALLURE_VERSION }} /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Run Tests
        run: |
          mvn clean test \
            -Dsurefire.suiteXmlFiles=src/test/resources/testng-${{ matrix.test-suite }}.xml \
            -Dbrowser=${{ matrix.browser }} \
            -Denvironment=${{ needs.setup.outputs.environment }} \
            -Dheadless=true \
            -Dallure.results.directory=target/allure-results

      - name: Generate Allure Report
        if: always()
        run: |
          allure generate target/allure-results --clean --output target/allure-report

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.test-suite }}
          path: |
            target/surefire-reports/
            target/allure-results/
            target/allure-report/
            screenshots/
            logs/

  # Performance Tests - √ñzel performans testleri
  performance-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[performance]')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup Chrome Browser
        uses: browser-actions/setup-chrome@latest

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Performance Tests
        run: |
          mvn clean test \
            -Dsurefire.suiteXmlFiles=src/test/resources/testng-performance.xml \
            -Dbrowser=chrome \
            -Denvironment=${{ needs.setup.outputs.environment }} \
            -Dheadless=true \
            -Dperformance.threshold.page.load=3000 \
            -Dperformance.threshold.api.response=1000

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            target/surefire-reports/
            target/allure-results/
            performance-reports/

  # Security Tests - G√ºvenlik testleri
  security-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup Chrome Browser
        uses: browser-actions/setup-chrome@latest

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Security Tests
        run: |
          mvn clean test \
            -Dsurefire.suiteXmlFiles=src/test/resources/testng-security.xml \
            -Dbrowser=chrome \
            -Denvironment=${{ needs.setup.outputs.environment }} \
            -Dheadless=true \
            -Dsecurity.level=high

      - name: Upload Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            target/surefire-reports/
            target/allure-results/
            security-reports/

  # Test Report Generation
  generate-reports:
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, security-tests]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results'
          path: test-results
          merge-multiple: true

      - name: Install Allure
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -zxf allure-${{ env.ALLURE_VERSION }}.tgz
          sudo mv allure-${{ env.ALLURE_VERSION }} /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Merge Allure Results
        run: |
          mkdir -p merged-allure-results
          find test-results -name "allure-results" -type d -exec cp -r {}/* merged-allure-results/ \;

      - name: Generate Consolidated Allure Report
        run: |
          allure generate merged-allure-results --clean --output consolidated-allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./consolidated-allure-report
          destination_dir: test-reports

      - name: Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: consolidated-allure-report/

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, security-tests, generate-reports]
    if: always()
    steps:
      - name: Calculate Test Results
        id: test-results
        run: |
          # Test sonu√ßlarƒ±nƒ± hesapla
          TOTAL_JOBS=3
          SUCCESSFUL_JOBS=0
          
          if [[ "${{ needs.comprehensive-tests.result }}" == "success" ]]; then
            SUCCESSFUL_JOBS=$((SUCCESSFUL_JOBS + 1))
          fi
          
          if [[ "${{ needs.performance-tests.result }}" == "success" ]]; then
            SUCCESSFUL_JOBS=$((SUCCESSFUL_JOBS + 1))
          fi
          
          if [[ "${{ needs.security-tests.result }}" == "success" ]]; then
            SUCCESSFUL_JOBS=$((SUCCESSFUL_JOBS + 1))
          fi
          
          SUCCESS_RATE=$((SUCCESSFUL_JOBS * 100 / TOTAL_JOBS))
          
          echo "success-rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "successful-jobs=$SUCCESSFUL_JOBS" >> $GITHUB_OUTPUT
          echo "total-jobs=$TOTAL_JOBS" >> $GITHUB_OUTPUT

      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#paytr-tests'
          username: 'PayTR Test Bot'
          icon_emoji: ':robot_face:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.test-results.outputs.success-rate >= 80 && 'good' || steps.test-results.outputs.success-rate >= 50 && 'warning' || 'danger' }}",
                  "title": "PayTR Test Automation Results",
                  "fields": [
                    {
                      "title": "Success Rate",
                      "value": "${{ steps.test-results.outputs.success-rate }}%",
                      "short": true
                    },
                    {
                      "title": "Jobs",
                      "value": "${{ steps.test-results.outputs.successful-jobs }}/${{ steps.test-results.outputs.total-jobs }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Report",
                      "value": "<https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports|View Report>",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "PayTR Test Automation Results - ${{ github.ref_name }}"
          to: ${{ secrets.EMAIL_RECIPIENTS }}
          from: PayTR Test Automation
          html_body: |
            <h2>PayTR Test Automation Results</h2>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Success Rate:</strong> ${{ steps.test-results.outputs.success-rate }}%</p>
            <p><strong>Jobs:</strong> ${{ steps.test-results.outputs.successful-jobs }}/${{ steps.test-results.outputs.total-jobs }}</p>
            
            <h3>Job Results:</h3>
            <ul>
              <li>Comprehensive Tests: ${{ needs.comprehensive-tests.result }}</li>
              <li>Performance Tests: ${{ needs.performance-tests.result }}</li>
              <li>Security Tests: ${{ needs.security-tests.result }}</li>
            </ul>
            
            <p><a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports">View Detailed Report</a></p>
            
            <p><em>This is an automated message from PayTR Test Automation CI/CD Pipeline.</em></p>

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    steps:
      - name: Cleanup Old Artifacts
        run: |
          echo "üßπ Cleaning up old artifacts and reports..."
          # GitHub Actions otomatik olarak 90 g√ºn sonra artifact'larƒ± siler
          # Burada ek cleanup i≈ülemleri yapƒ±labilir