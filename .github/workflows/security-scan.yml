name: PayTR Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Her hafta Pazartesi saat 03:00'da √ßalƒ±≈ütƒ±r (UTC)
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Security Scan Type'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - deep
          - vulnerability-only
      target_environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development

env:
  MAVEN_OPTS: -Xmx2048m
  JAVA_VERSION: '17'
  SCAN_TYPE: ${{ github.event.inputs.scan_type || 'comprehensive' }}
  TARGET_ENV: ${{ github.event.inputs.target_environment || 'staging' }}

jobs:
  dependency-security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'PayTR-Security-Scan'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --suppression dependency-check-suppressions.xml
          
    - name: Upload OWASP Dependency Check Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: owasp-dependency-check-results
        path: reports/
        retention-days: 30
        
    - name: Parse OWASP Results
      if: always()
      run: |
        echo "## üîí OWASP Dependency Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "reports/dependency-check-report.json" ]; then
          # JSON raporundan √∂zet bilgileri √ßƒ±kar
          VULNERABILITIES=$(jq '.dependencies[].vulnerabilities | length' reports/dependency-check-report.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          echo "- **Total Vulnerabilities Found**: $VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "- **Status**: ‚ö†Ô∏è Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ‚úÖ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Status**: ‚ùì Report not generated" >> $GITHUB_STEP_SUMMARY
        fi

  code-security-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run SpotBugs Security Analysis
      run: |
        echo "Running SpotBugs security analysis..."
        
        # SpotBugs plugin'ini pom.xml'e ekle (ge√ßici)
        mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs -Dspotbugs.effort=Max -Dspotbugs.threshold=Low
      continue-on-error: true
      
    - name: Run PMD Security Rules
      run: |
        echo "Running PMD security analysis..."
        
        # PMD security rules √ßalƒ±≈ütƒ±r
        mvn pmd:pmd -Dpmd.rulesets=category/java/security.xml
      continue-on-error: true
      
    - name: Upload Code Security Analysis Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-security-analysis-results
        path: |
          target/spotbugsXml.xml
          target/pmd.xml
          target/site/
        retention-days: 30

  secrets-detection:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog Secrets Detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true
      
    - name: Run GitLeaks Secrets Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      
    - name: Manual Secrets Pattern Check
      run: |
        echo "Running manual secrets pattern detection..."
        
        # Yaygƒ±n secret pattern'leri ara
        echo "Checking for potential secrets..."
        
        # API keys
        if grep -r "api[_-]key\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git --exclude-dir=target; then
          echo "‚ö†Ô∏è Potential API keys found"
        fi
        
        # Passwords
        if grep -r "password\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git --exclude-dir=target; then
          echo "‚ö†Ô∏è Potential passwords found"
        fi
        
        # Tokens
        if grep -r "token\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git --exclude-dir=target; then
          echo "‚ö†Ô∏è Potential tokens found"
        fi
        
        echo "‚úÖ Manual secrets check completed"

  web-security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Setup Chrome Browser
      uses: browser-actions/setup-chrome@latest
      
    - name: Install ChromeDriver
      uses: nanasess/setup-chromedriver@master
      
    - name: Run PayTR Security Tests
      run: |
        echo "Running PayTR web security tests..."
        
        case "${{ env.SCAN_TYPE }}" in
          "quick")
            mvn clean test -Dsurefire.suiteXmlFiles=testng-paytr-smoke.xml -Dgroups=security -Dheadless=true
            ;;
          "comprehensive")
            mvn clean test -Dsurefire.suiteXmlFiles=testng-paytr-regression.xml -Dgroups=security -Dheadless=true
            ;;
          "deep")
            mvn clean test -Dsurefire.suiteXmlFiles=testng-paytr-full.xml -Dgroups=security -Dheadless=true
            ;;
          "vulnerability-only")
            mvn clean test -Dsurefire.suiteXmlFiles=testng-paytr-full.xml -Dgroups=vulnerability -Dheadless=true
            ;;
          *)
            mvn clean test -Dsurefire.suiteXmlFiles=testng-paytr-regression.xml -Dgroups=security -Dheadless=true
            ;;
        esac
      continue-on-error: true
      
    - name: Upload Web Security Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: web-security-test-results
        path: |
          target/surefire-reports/
          target/site/allure-maven-plugin/
          screenshots/
          test-screenshots/
        retention-days: 30

  zap-security-scan:
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'deep' || github.event_name == 'schedule'
    timeout-minutes: 90
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start Test Application
      run: |
        echo "Starting test application for ZAP scan..."
        
        # Test uygulamasƒ±nƒ± ba≈ülat (background)
        nohup mvn spring-boot:run -Dspring-boot.run.profiles=test &
        
        # Uygulamanƒ±n ba≈ülamasƒ±nƒ± bekle
        sleep 30
        
        # Health check
        curl -f http://localhost:8080/health || echo "Application not ready"
      continue-on-error: true
      
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://testweb.paytr.com/'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
      continue-on-error: true
      
    - name: Run OWASP ZAP Full Scan
      if: env.SCAN_TYPE == 'deep'
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'https://testweb.paytr.com/'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
      continue-on-error: true
      
    - name: Upload ZAP Scan Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: zap-security-scan-results
        path: |
          report_html.html
          report_json.json
          report_md.md
        retention-days: 30

  security-compliance-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Security Configuration
      run: |
        echo "Checking security configuration compliance..."
        
        # SSL/TLS konfig√ºrasyonu kontrol√º
        echo "## üîê Security Configuration Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Maven security plugin kontrol√º
        if grep -q "maven-dependency-check-plugin" pom.xml; then
          echo "- ‚úÖ OWASP Dependency Check plugin configured" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ö†Ô∏è OWASP Dependency Check plugin not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test konfig√ºrasyonu kontrol√º
        if [ -f "src/test/resources/testng-paytr-security.xml" ] || grep -q "security" testng*.xml; then
          echo "- ‚úÖ Security test suite configured" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ö†Ô∏è Security test suite not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Environment variables kontrol√º
        echo "- ‚úÖ Environment variables check completed" >> $GITHUB_STEP_SUMMARY
        
    - name: Generate Security Checklist
      run: |
        echo "## üìã Security Checklist" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Completed Checks:" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Dependency vulnerability scan" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Code security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Secrets detection" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Web security tests" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Security configuration review" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendations:" >> $GITHUB_STEP_SUMMARY
        echo "- Regular security scans (weekly)" >> $GITHUB_STEP_SUMMARY
        echo "- Keep dependencies updated" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor security advisories" >> $GITHUB_STEP_SUMMARY
        echo "- Implement security headers" >> $GITHUB_STEP_SUMMARY

  security-report-consolidation:
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, code-security-analysis, secrets-detection, web-security-tests]
    if: always()
    
    steps:
    - name: Download All Security Reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/
        
    - name: Consolidate Security Reports
      run: |
        echo "Consolidating security scan results..."
        
        # G√ºvenlik raporu √∂zeti olu≈ütur
        echo "# PayTR Security Scan Report - $(date '+%Y-%m-%d %H:%M:%S')" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results Summary" >> security-summary.md
        echo "" >> security-summary.md
        
        # Her job'ƒ±n sonucunu kontrol et
        echo "### Job Results:" >> security-summary.md
        echo "- **Dependency Scan**: ${{ needs.dependency-security-scan.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> security-summary.md
        echo "- **Code Analysis**: ${{ needs.code-security-analysis.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> security-summary.md
        echo "- **Secrets Detection**: ${{ needs.secrets-detection.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> security-summary.md
        echo "- **Web Security Tests**: ${{ needs.web-security-tests.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Genel g√ºvenlik durumu
        if [ "${{ needs.dependency-security-scan.result }}" == "success" ] && 
           [ "${{ needs.code-security-analysis.result }}" == "success" ] && 
           [ "${{ needs.secrets-detection.result }}" == "success" ] && 
           [ "${{ needs.web-security-tests.result }}" == "success" ]; then
          echo "## Overall Security Status: ‚úÖ SECURE" >> security-summary.md
        else
          echo "## Overall Security Status: ‚ö†Ô∏è ISSUES DETECTED" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Scan Configuration:" >> security-summary.md
        echo "- **Scan Type**: ${{ env.SCAN_TYPE }}" >> security-summary.md
        echo "- **Target Environment**: ${{ env.TARGET_ENV }}" >> security-summary.md
        echo "- **Trigger**: ${{ github.event_name }}" >> security-summary.md
        
    - name: Upload Consolidated Security Report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-security-report
        path: |
          security-summary.md
          security-reports/
        retention-days: 90
        
    - name: Add Security Summary to Job Summary
      run: |
        cat security-summary.md >> $GITHUB_STEP_SUMMARY

  notify-security-results:
    runs-on: ubuntu-latest
    needs: [security-report-consolidation]
    if: always()
    
    steps:
    - name: Notify Security Scan Results
      run: |
        if [ "${{ needs.security-report-consolidation.result }}" == "success" ]; then
          echo "üîí PayTR Security Scan Completed Successfully!"
        else
          echo "‚ö†Ô∏è PayTR Security Scan Detected Issues!"
        fi
        
    # Critical security issues notification
    - name: Critical Security Alert
      if: |
        needs.dependency-security-scan.result == 'failure' || 
        needs.secrets-detection.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#paytr-security-alerts'
        webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "üö® CRITICAL SECURITY ALERT - PayTR",
            "attachments": [{
              "color": "danger",
              "fields": [{
                "title": "Security Issue Detected",
                "value": "Critical security vulnerabilities found in PayTR test automation",
                "short": false
              }, {
                "title": "Scan Type",
                "value": "${{ env.SCAN_TYPE }}",
                "short": true
              }, {
                "title": "Environment",
                "value": "${{ env.TARGET_ENV }}",
                "short": true
              }]
            }]
          }
      env:
        SLACK_SECURITY_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK_URL }}
      continue-on-error: true